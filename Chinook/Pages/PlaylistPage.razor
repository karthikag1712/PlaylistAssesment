@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Interfaces;
@using ClientModels;
@using Models;

<h1>Playlist <strong>@Playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var _track in Track)
            {
                <tr>
                    <td>@_track.ArtistName - @_track.AlbumTitle - @_track.TrackName</td>
                    @* <td>
                        <div class="d-flex">
                            @if (playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IUserService UserSvc { get; set; }
    [Inject] ITrackService TrackSvc { get; set; }
    [Inject] IPlaylistService PlaylistSvc { get; set; }
    List<PlaylistTrack> Track;
    Models.Playlist Playlist;

    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        Playlist = await PlaylistSvc.GetPlaylistsById(PlaylistId);
        Track = await TrackSvc.GetTracksByPlaylistId(PlaylistId);
    }

    

    private void FavoriteTrack(long trackId)
    {
       // var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // TODO: add track to Favorites playlist

        //InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        //var track = playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);

        // TODO: remove track from Favorites playlist

       // InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        // TODO
        CloseInfoMessage();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
